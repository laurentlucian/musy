// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  accessToken  String
  refreshToken String
  expiresAt    Int
  tokenType    String
  revoked      Boolean  @default(false)

  user  Profile?
  party Party[]
  queue Queue[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  // should've been the @id
  userId    String   @unique

  name   String
  bio    String?
  email  String
  image  String
  party  Party?
  queue  Queue[]
  liked  LikedSongs[]
  recent RecentSongs[]

  ai       AI?
  settings Settings?
}

model Settings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   Profile @relation(fields: [userId], references: [userId])
  userId String  @unique

  autoscroll Boolean @default(true)
  isPrivate  Boolean @default(false)
  allowQueue String  @default("on")
  // theme String @default("light")
}

model AI {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   Profile @relation(fields: [userId], references: [userId])
  userId String  @unique

  mood String?
  // ideas: recommended tracks
}

model Party {
  owner        User   @relation(fields: [ownerId], references: [id])
  ownerId      String
  currentTrack String

  user      Profile @relation(fields: [userId], references: [userId])
  userId    String  @unique
  userName  String
  userImage String

  assignedAt DateTime @default(now())

  @@id([ownerId, userId])
}

model Queue {
  id        Int      @id @default(autoincrement())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
  pending   Boolean  @default(false)

  trackId   String?
  uri       String
  name      String
  image     String
  albumUri  String?
  albumName String?
  artist    String
  artistUri String?
  explicit  Boolean

  // can be anonymous
  user   Profile? @relation(fields: [userId], references: [userId])
  userId String?
  action String   @default("add")
}

model LikedSongs {
  id      Int      @id @default(autoincrement())
  likedAt DateTime @default(now())

  trackId   String
  uri       String
  name      String
  image     String
  albumUri  String?
  albumName String?
  artist    String
  artistUri String?
  explicit  Boolean

  user   Profile? @relation(fields: [userId], references: [userId])
  userId String?
  action String   @default("liked")

  @@unique([trackId, userId])
}

model RecentSongs {
  id       Int      @id @default(autoincrement())
  playedAt DateTime @default(now())

  trackId   String
  uri       String
  name      String
  image     String
  albumUri  String
  albumName String
  artist    String
  artistUri String
  explicit  Boolean
  duration  Int     @default(0)

  user   Profile @relation(fields: [userId], references: [userId])
  userId String
  action String  @default("liked")

  @@unique([playedAt, userId])
}
