// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  accessToken  String
  refreshToken String
  expiresAt    Int
  tokenType    String
  revoked      Boolean  @default(false)

  user  Profile?
  party Party[]

  // current schema isn't ideal, User & Profile are 1:1
  // the relationship between users are using User model and Profile model as different
  queue       Queue[] // sent
  recommended RecommendedSongs[]

  friendsAdded Friends[] @relation("main")
  friendsAddedMe Friends[] @relation("friends")
 }

  //The person who sent the request is the user and the person who received the request is the friend 
  //The status of the request is pending until the friend accepts the request 
  //The status of the request is accepted when the friend accepts the request, There will be 2 rows in the table, 
  //one for each user
  //The status of the request is rejected when the friend rejects the request, The row will be deleted from the table
  
  
 model Friends {
  id        Int       @id @default(autoincrement())
  user User @relation("main", fields: [userId], references: [id])
  userId String
  friend User @relation("friends", fields: [friendId], references: [id])
  friendId String
  status String
  
  @@unique([userId, friendId])
 }

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  // should've been the @id
  userId    String   @unique

  name        String
  bio         String?
  email       String
  image       String
  party       Party?
  queue       Queue[]
  liked       LikedSongs[]
  // received
  recent      RecentSongs[]
  recommended RecommendedSongs[]

  ai            AI?
  settings      Settings?
  theme         Theme?
  playback      Playback?
  ColorPreset   ColorPreset[]
  Sessions      Sessions[]
  favorite      Favorite[] @relation("favorite")
  favBy         Favorite[] @relation("favBy")
  block         Block[] @relation("block")
  blockBy       Block[] @relation("blockedBy")


}

model AI {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   Profile @relation(fields: [userId], references: [userId])
  userId String  @unique

  mood String?
  // ideas: recommended tracks
}

model Party {
  // refactor to be a self relation on the Profile model
  owner        User   @relation(fields: [ownerId], references: [id])
  ownerId      String
  currentTrack String

  user      Profile @relation(fields: [userId], references: [userId])
  userId    String  @unique
  userName  String
  userImage String

  assignedAt DateTime @default(now())

  @@id([ownerId, userId])
}

model Queue {
  id        Int      @id @default(autoincrement())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
  pending   Boolean  @default(false)

  track   Track  @relation(fields: [trackId], references: [id])
  trackId String

  // can be anonymous
  user   Profile? @relation(fields: [userId], references: [userId])
  userId String?
  action String   @default("add")
}

model LikedSongs {
  id      Int      @id @default(autoincrement())
  likedAt DateTime @default(now())

  track   Track  @relation(fields: [trackId], references: [id])
  trackId String

  user   Profile @relation(fields: [userId], references: [userId])
  userId String
  action String  @default("liked")

  @@unique([trackId, userId])
}

model Favorite {
  id            Int      @id @default(autoincrement())
  favAt         DateTime @default(now())
  favorite      Profile  @relation("favorite",fields: [favoriteId], references: [userId])
  favoriteId    String
  favoritedBy   Profile  @relation("favBy",fields: [favoritedById], references: [userId])
  favoritedById String
}

model Block {
  id            Int      @id @default(autoincrement())
  favAt         DateTime @default(now())
  block      Profile  @relation("block",fields: [blockId], references: [userId])
  blockId    String
  blockedBy   Profile  @relation("blockedBy",fields: [blockedById], references: [userId])
  blockedById String
}

model RecommendedSongs {
  id        Int      @id @default(autoincrement())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
  pending   Boolean  @default(false)
  comment   String?
  rating    Int?
  //
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String
  //
  sender    Profile  @relation(fields: [senderId], references: [userId])
  senderId  String
  action    String   @default("recommend")
}

model Settings {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  //
  user              Profile  @relation(fields: [userId], references: [userId])
  userId            String   @unique
  //
  autoscroll        Boolean  @default(true)
  isPrivate         Boolean  @default(false)
  allowQueue        String   @default("on")
  allowRecommend    String   @default("on")
  allowPreview      Boolean  @default(false)
  profileSong       Track?   @relation(fields: [profileSongId], references: [id])
  profileSongId     String?
  pauseQueue        Boolean  @default(false)
  pauseRecent       Boolean  @default(false)
  pauseRecentAt     DateTime @default(now()) @updatedAt
  playerButtonRight Boolean  @default(false)
  founder           Boolean  @default(false)
  dev               Boolean  @default(false)
  easterEgg         Boolean  @default(false)
  miniPlayer        Boolean  @default(false)
  // background     String?
  // theme          String   @default("preset")
  // theme String @default("light")
}

model ColorPreset {
  id               Int     @id @default(autoincrement())
  createdBy        Profile @relation(fields: [createdById], references: [userId])
  createdById      String
  //
  name             String  @default("musy")
  backgroundLight  String  @default("#EEE6E2")
  backgroundDark   String  @default("#090808")
  mainTextLight    String  @default("#161616")
  mainTextDark     String  @default("#EEE6E2")
  subTextLight     String  @default("#161616")
  subTextDark      String  @default("#EEE6E2")
  playerColorLight String  @default("#E7DFD9")
  playerColorDark  String  @default("#101010")
  //
  selectedBy       Theme[]
}

model Theme {
  user             Profile       @relation(fields: [userId], references: [userId])
  userId           String        @id @unique
  //
  colorPreset      ColorPreset[]
  //
  isPreset         Boolean       @default(true)
  backgroundLight  String        @default("#EEE6E2")
  backgroundDark   String        @default("#090808")
  mainTextLight    String        @default("#161616")
  mainTextDark     String        @default("#EEE6E2")
  subTextLight     String        @default("#161616")
  subTextDark      String        @default("#EEE6E2")
  gradient         Boolean       @default(false)
  bgGradientDark   String        @default("linear(to-t, #090808 40%, #fcbde2 90%)")
  bgGradientLight  String        @default("linear(to-t, #EEE6E2 40%, #fcbde2 90%)")
  //
  customPlayer     Bytes?
  playerColorLight String        @default("#E7DFD9")
  playerColorDark  String        @default("#101010")
  blur             Boolean       @default(true)
  opaque           Boolean       @default(false)
  //
  musyLogo         String        @default("musy")
}

model Track {
  id          String             @id @unique
  uri         String
  name        String
  image       String
  albumUri    String
  albumName   String
  artist      String
  artistUri   String
  explicit    Boolean
  preview_url String?
  link        String
  duration    Int
  //
  queue       Queue[]
  liked       LikedSongs[]
  recent      RecentSongs[]
  recommended RecommendedSongs[]
  playback    Playback[]
  Settings    Settings[]
}

model Playback {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt Int // timestamp from spotify response
  //
  user      Profile  @relation(fields: [userId], references: [userId])
  userId    String   @unique
  //
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String
  //
  progress  Int
}

model RecentSongs {
  id        Int       @id @default(autoincrement())
  playedAt  DateTime  @default(now())
  //
  track     Track     @relation(fields: [trackId], references: [id])
  trackId   String
  //
  user      Profile   @relation(fields: [userId], references: [userId])
  userId    String
  action    String    @default("recent")
  session   Sessions? @relation(fields: [sessionId], references: [id])
  sessionId Int?

  // HACK(po): 
  // We add songs to this model in two ocassions: 
  // 1. Via the playbackQ: we add the song to the `playback` model and optimistically add here
  // 2. Via the userQ: we fetch the last 50 recently from spotify and add here
  // We want to do this because `userQ` runs every 30 minutes, which leaves `sessions` outdated for 30 minutes. 
  // By leveraging the `playback` endpoint that runs every 30 seconds, we can keep the `sessions` up to date.
  // But it seems that the `playback` endpoint returns the `playedAt` timestamp from the moment the song started playing, 
  // while the `recentlyPlayed` endpoint returns the `playedAt` timestamp from the moment the song finished playing.
  // Which leads to duplicated data as `playedAt` is different for the same song.
  // To fix this, we add a `verifiedFromSpotify` field that is set to true when the song comes from `recentlyPlayed` endpoint
  // and false when it comes from `playback` endpoint.
  // This way, we can delete the songs that come from `playback` endpoint once they are filled by the `recentlyPlayed` endpoint.
  verifiedFromSpotify Boolean @default(true)

  @@unique([playedAt, userId])
}

model Sessions {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  startTime DateTime
  user      Profile       @relation(fields: [userId], references: [userId])
  userId    String
  songs     RecentSongs[]
}
