// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  accessToken  String
  refreshToken String
  expiresAt    Int
  tokenType    String
  revoked      Boolean  @default(false)

  user  Profile?
  party Party[]

  // current schema isn't ideal, User & Profile are 1:1
  // the relationship between users are using User model and Profile model as different
  queue       Queue[] // sent
  recommended RecommendedSongs[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  // should've been the @id
  userId    String   @unique

  name        String
  bio         String?
  email       String
  image       String
  party       Party?
  queue       Queue[]
  liked       LikedSongs[]
  // received
  recent      RecentSongs[]
  recommended RecommendedSongs[]

  ai       AI?
  settings Settings?
  playback Playback?
}

model Settings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   Profile @relation(fields: [userId], references: [userId])
  userId String  @unique

  autoscroll     Boolean @default(true)
  isPrivate      Boolean @default(false)
  allowQueue     String  @default("on")
  allowRecommend String  @default("on")
  allowPreview   Boolean @default(false)
  // theme String @default("light")
}

model AI {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   Profile @relation(fields: [userId], references: [userId])
  userId String  @unique

  mood String?
  // ideas: recommended tracks
}

model Party {
  // refactor to be a self relation on the Profile model
  owner        User   @relation(fields: [ownerId], references: [id])
  ownerId      String
  currentTrack String

  user      Profile @relation(fields: [userId], references: [userId])
  userId    String  @unique
  userName  String
  userImage String

  assignedAt DateTime @default(now())

  @@id([ownerId, userId])
}

model Queue {
  id        Int      @id @default(autoincrement())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
  pending   Boolean  @default(false)

  track     Track?  @relation(fields: [trackId], references: [id])
  trackId   String?
  uri       String
  name      String
  image     String
  albumUri  String?
  albumName String?
  artist    String
  artistUri String?
  explicit  Boolean
  duration  Int     @default(0)

  // can be anonymous
  user   Profile? @relation(fields: [userId], references: [userId])
  userId String?
  action String   @default("add")
}

model LikedSongs {
  id      Int      @id @default(autoincrement())
  likedAt DateTime @default(now())

  track     Track?  @relation(fields: [trackId], references: [id])
  trackId   String
  uri       String
  name      String
  image     String
  albumUri  String?
  albumName String?
  artist    String
  artistUri String?
  explicit  Boolean
  duration  Int     @default(0)

  user   Profile? @relation(fields: [userId], references: [userId])
  userId String?
  action String   @default("liked")

  @@unique([trackId, userId])
}

model RecentSongs {
  id       Int      @id @default(autoincrement())
  playedAt DateTime @default(now())

  track     Track?  @relation(fields: [trackId], references: [id])
  trackId   String
  uri       String
  name      String
  image     String
  albumUri  String?
  albumName String?
  artist    String
  artistUri String?
  explicit  Boolean
  duration  Int     @default(0)

  user   Profile @relation(fields: [userId], references: [userId])
  userId String
  action String  @default("recent")

  @@unique([playedAt, userId])
}

model RecommendedSongs {
  id        Int      @id @default(autoincrement())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
  pending   Boolean  @default(false)
  comment   String?

  track       Track?  @relation(fields: [trackId], references: [id])
  trackId     String
  uri         String
  name        String
  image       String
  albumUri    String?
  albumName   String?
  artist      String
  artistUri   String?
  explicit    Boolean
  preview_url String?
  duration    Int     @default(0)

  sender   Profile @relation(fields: [senderId], references: [userId])
  senderId String
  action   String  @default("recommend")
}

model Track {
  id        String  @id @unique
  uri       String
  name      String
  image     String
  albumUri  String
  albumName String
  artist    String
  artistUri String
  explicit  Boolean
  duration  Int

  queue       Queue[]
  liked       LikedSongs[]
  recent      RecentSongs[]
  recommended RecommendedSongs[]
  playback    Playback[]
}

model Playback {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt Int // timestamp from spotify response

  user   Profile @relation(fields: [userId], references: [userId])
  userId String  @unique

  track   Track  @relation(fields: [trackId], references: [id])
  trackId String

  progress Int
}
