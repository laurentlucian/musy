model User {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  //
  providers Provider[]
  //
  profile   Profile?
  party     Party[]
  //
  queue     Queue[]
}

model Provider {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  // 'spotify' or 'google'
  type         String
  accountId    String
  accessToken  String
  refreshToken String
  expiresAt    BigInt
  tokenType    String
  revoked      Boolean  @default(false)
  //
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  @@unique([userId, type])
  @@unique([accountId, type])
}

model Profile {
  id          String            @id
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  user        User              @relation(fields: [id], references: [id])
  //
  name        String?
  bio         String?
  email       String            @unique
  image       String?
  //
  party       Party?
  queue       Queue[]
  liked       LikedSongs[]
  recent      RecentSongs[]
  recommended Recommended[]
  ai          AI?
  playback    Playback?
  Sessions    Sessions[]
  favorite    Favorite[]        @relation("userToFavorite")
  favBy       Favorite[]        @relation("favoriteToUser")
  block       Block[]           @relation("userToBlock")
  blockBy     Block[]           @relation("blockToUser")
  mute        Mute[]            @relation("userToMute")
  muteBy      Mute[]            @relation("muteToUser")
  following   Follow[]          @relation("follower")
  followers   Follow[]          @relation("following")
  playbacks   PlaybackHistory[]
  playlists   Playlist[]
  feed        Feed[]
}
